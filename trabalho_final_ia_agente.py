# -*- coding: utf-8 -*-
"""trabalho_final_ia_agente.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jqsN3qfnkioyARXw13svyi4LCqJSWJQF
"""

from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np
from PIL import Image
import os

# Função para carregar imagens como vetores
def load_images_from_folder(folder, label, flatten=False, size=(128, 128)):
    images = []
    labels = []
    for filename in os.listdir(folder):
        path = os.path.join(folder, filename)
        try:
            img = Image.open(path).convert("RGB").resize(size)
            img_array = (np.asarray(img).flatten() if flatten else np.asarray(img)) / 255.0
            images.append(img_array)
            labels.append(label)
        except:
            continue
    return images, labels

# Carregando imagens
real_imgs, real_labels = load_images_from_folder("dataset/real", label=0)
print(len(real_imgs))

fake_imgs, fake_labels = load_images_from_folder("dataset/fake", label=1)
print(len(fake_imgs))

X = np.array(real_imgs + fake_imgs)
y = np.array(real_labels + fake_labels)

# Divisão treino/teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# Treinamento
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=300, random_state=42)
mlp.fit(X_train_scaled, y_train)

# Avaliação
y_pred = mlp.predict(X_test_scaled)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
xticklabels=['Negativo', 'Positivo'],
yticklabels=['Negativo', 'Positivo'])
plt.xlabel('Previsão')
plt.ylabel('Valor Real')
plt.title('Matriz de Confusão')
plt.show()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical

# Garantir que y esteja no formato correto
y_train_cat = to_categorical(y_train, num_classes=2)
y_test_cat = to_categorical(y_test, num_classes=2)

# Definindo o modelo CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')  # Saída com 2 classes
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Treinamento
history = model.fit(
    X_train, y_train_cat,
    epochs=10,
    batch_size=32,
    validation_split=0.2
)

# Avaliação no conjunto de teste
test_loss, test_accuracy = model.evaluate(X_test, y_test_cat)
print(f"Acurácia no teste: {test_accuracy:.2f}")

import matplotlib.pyplot as plt

# Acurácia
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Treinamento')
plt.plot(history.history['val_accuracy'], label='Validação')
plt.title('Acurácia por Época')
plt.xlabel('Épocas')
plt.ylabel('Acurácia')
plt.legend()
plt.grid(True)

# Perda
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Treinamento')
plt.plot(history.history['val_loss'], label='Validação')
plt.title('Perda (Loss) por Época')
plt.xlabel('Épocas')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Previsões no conjunto de teste
y_pred_probs = model.predict(X_test)
y_pred_classes = np.argmax(y_pred_probs, axis=1)  # Classe com maior probabilidade
y_true = np.argmax(y_test_cat, axis=1)  # Se você usou to_categorical

# Relatório de classificação
print(classification_report(y_true, y_pred_classes, target_names=["Real", "Fake"]))

# Matriz de confusão
cm = confusion_matrix(y_true, y_pred_classes)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Real", "Fake"],
            yticklabels=["Real", "Fake"])
plt.xlabel("Previsão")
plt.ylabel("Valor Real")
plt.title("Matriz de Confusão - CNN")
plt.tight_layout()
plt.show()

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Carregando a base MobileNetV2 sem o topo (camadas finais)
base_model = MobileNetV2(
    weights='imagenet',
    include_top=False,  # remove as camadas de classificação originais
    input_shape=(128, 128, 3)
)
base_model.trainable = False  # Congela os pesos da base

# Construindo o modelo sobre o backbone
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)
x = Dense(128, activation='relu')(x)
output = Dense(2, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=output)

# Compilando
model.compile(
    optimizer=Adam(learning_rate=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Treinamento
history = model.fit(
    X_train, y_train_cat,
    epochs=10,
    batch_size=32,
    validation_split=0.2
)

test_loss, test_accuracy = model.evaluate(X_test, y_test_cat)
print(f"Acurácia no teste: {test_accuracy:.2f}")

import matplotlib.pyplot as plt

# Acurácia
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Treinamento')
plt.plot(history.history['val_accuracy'], label='Validação')
plt.title('Acurácia por Época')
plt.xlabel('Épocas')
plt.ylabel('Acurácia')
plt.legend()
plt.grid(True)

# Perda
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Treinamento')
plt.plot(history.history['val_loss'], label='Validação')
plt.title('Perda (Loss) por Época')
plt.xlabel('Épocas')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Previsões no conjunto de teste
y_pred_probs = model.predict(X_test)
y_pred_classes = np.argmax(y_pred_probs, axis=1)  # Classe com maior probabilidade
y_true = np.argmax(y_test_cat, axis=1)  # Se você usou to_categorical

# Relatório de classificação
print(classification_report(y_true, y_pred_classes, target_names=["Real", "Fake"]))

# Matriz de confusão
cm = confusion_matrix(y_true, y_pred_classes)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Real", "Fake"],
            yticklabels=["Real", "Fake"])
plt.xlabel("Previsão")
plt.ylabel("Valor Real")
plt.title("Matriz de Confusão - CNN")
plt.tight_layout()
plt.show()

# 1. Descongela as últimas camadas da MobileNetV2
base_model.trainable = True

# 2. Opcional: descongelar só a partir de uma camada específica
for layer in base_model.layers[:-60]:  # Descongela só as últimas 30 camadas
    layer.trainable = False

# 3. Recompila com taxa de aprendizado menor
model.compile(
    optimizer=Adam(learning_rate=1e-5),  # Mais baixa!
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# 4. Treinamento com fine-tuning
history_finetune = model.fit(
    X_train, y_train_cat,
    epochs=10,
    batch_size=32,
    validation_split=0.2
)

test_loss, test_accuracy = model.evaluate(X_test, y_test_cat)
print(f"Acurácia no teste: {test_accuracy:.2f}")

import matplotlib.pyplot as plt

# Acurácia
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history_finetune.history['accuracy'], label='Treinamento')
plt.plot(history_finetune.history['val_accuracy'], label='Validação')
plt.title('Acurácia por Época')
plt.xlabel('Épocas')
plt.ylabel('Acurácia')
plt.legend()
plt.grid(True)

# Perda
plt.subplot(1, 2, 2)
plt.plot(history_finetune.history['loss'], label='Treinamento')
plt.plot(history_finetune.history['val_loss'], label='Validação')
plt.title('Perda (Loss) por Época')
plt.xlabel('Épocas')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Previsões no conjunto de teste
y_pred_probs = model.predict(X_test)
y_pred_classes = np.argmax(y_pred_probs, axis=1)  # Classe com maior probabilidade
y_true = np.argmax(y_test_cat, axis=1)  # Se você usou to_categorical

# Relatório de classificação
print(classification_report(y_true, y_pred_classes, target_names=["Real", "Fake"]))

# Matriz de confusão
cm = confusion_matrix(y_true, y_pred_classes)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Real", "Fake"],
            yticklabels=["Real", "Fake"])
plt.xlabel("Previsão")
plt.ylabel("Valor Real")
plt.title("Matriz de Confusão - CNN")
plt.tight_layout()
plt.show()